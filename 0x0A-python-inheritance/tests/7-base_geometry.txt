Test Cases for the BaseGeometry class
===========================================================
                                                     By AWA
===========================================================


First import class

>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Now Tests

>>> b = BaseGeometry()
>>> b.integer_validator()
Traceback (most recent call last):
  ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> b.integer_validator('sumnum')
Traceback (most recent call last):
  ...
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> b.integer_validator("sumnum", 3)
>>> b.integer_validator("sumnum", 0)
Traceback (most recent call last):
  ...
ValueError: sumnum must be greater than 0
>>> b.integer_validator("sumnum", -4)
Traceback (most recent call last):
  ...
ValueError: sumnum must be greater than 0
>>> b.integer_validator("sumnum", "99")
Traceback (most recent call last):
  ...
TypeError: sumnum must be an integer
>>> b.integer_validator("sumnum", 99)
>>> b.integer_validator("num", 99.0)
Traceback (most recent call last):
  ...
TypeError: num must be an integer
>>> b.integer_validator("", 99)
>>> b.integer_validator("", -3)
Traceback (most recent call last):
  ...
ValueError:  must be greater than 0
>>> b.area()
Traceback (most recent call last):
  ...
Exception: area() is not implemented
>>> b.integer_validator("string", "John")
Traceback (most recent call last):
  ...
TypeError: string must be an integer
>>> b.integer_validator("array", [3, 5, 9])
Traceback (most recent call last):
  ...
TypeError: array must be an integer
>>> b.integer_validator("bool", True)
Traceback (most recent call last):
  ...
TypeError: bool must be an integer
>>> b.integer_validator("none", None)
Traceback (most recent call last):
  ...
TypeError: none must be an integer
>>> b.integer_validator("set", {3, 5, 9})
Traceback (most recent call last):
  ...
TypeError: set must be an integer
>>> b.integer_validator("nan", float('nan'))
Traceback (most recent call last):
  ...
TypeError: nan must be an integer
>>> b.